// Cabeçalho a ser colocado em todo arquivo fonte produzido pelo grupo que desenvolvou o trabalho

// Nome(s) dos Discente(s): Rafael Alvarenga e Yuri Gandra
// Matrícula:               0053108          e 0049466
// Data: 09-10-2022


// Declaro que sou (somos) o(s) único(s) autor(es) e responsável (éis) por este programa. Todas as partes do programa, exceto as que foram fornecidas
// pelo professor ou copiadas das bibliotecas ou do livro Modern Compiler Implementation, foram desenvolvidas por mim. Declaro também que
// sou (somos) o(s) responsável (éis) por todas as eventuais cópias deste programa e que não distribui (mos) nem facilitei (amos) a distribuição de cópias.
package Parser;/* Generated By:JavaCC: Do not edit this line. MiniJavaParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniJavaParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int SINGLE_LINE_COMMENT = 6;
    /** RegularExpression Id. */
    int FORMAL_COMMENT = 7;
    /** RegularExpression Id. */
    int MULTI_LINE_COMMENT = 8;
    /** RegularExpression Id. */
    int LPAREN = 9;
    /** RegularExpression Id. */
    int RPAREN = 10;
    /** RegularExpression Id. */
    int LSQPAREN = 11;
    /** RegularExpression Id. */
    int RSQPAREN = 12;
    /** RegularExpression Id. */
    int LBRACE = 13;
    /** RegularExpression Id. */
    int RBRACE = 14;
    /** RegularExpression Id. */
    int SEMICOLON = 15;
    /** RegularExpression Id. */
    int DOT = 16;
    /** RegularExpression Id. */
    int ASSIGN = 17;
    /** RegularExpression Id. */
    int LT = 18;
    /** RegularExpression Id. */
    int PLUS = 19;
    /** RegularExpression Id. */
    int MINUS = 20;
    /** RegularExpression Id. */
    int AND = 21;
    /** RegularExpression Id. */
    int NOT = 22;
    /** RegularExpression Id. */
    int BOOLEAN = 23;
    /** RegularExpression Id. */
    int CLASS = 24;
    /** RegularExpression Id. */
    int INTERFACE = 25;
    /** RegularExpression Id. */
    int ELSE = 26;
    /** RegularExpression Id. */
    int EXTENDS = 27;
    /** RegularExpression Id. */
    int FALSE = 28;
    /** RegularExpression Id. */
    int IF = 29;
    /** RegularExpression Id. */
    int WHILE = 30;
    /** RegularExpression Id. */
    int INTEGER = 31;
    /** RegularExpression Id. */
    int LENGTH = 32;
    /** RegularExpression Id. */
    int MAIN = 33;
    /** RegularExpression Id. */
    int NEW = 34;
    /** RegularExpression Id. */
    int PUBLIC = 35;
    /** RegularExpression Id. */
    int RETURN = 36;
    /** RegularExpression Id. */
    int STATIC = 37;
    /** RegularExpression Id. */
    int STRING = 38;
    /** RegularExpression Id. */
    int THIS = 39;
    /** RegularExpression Id. */
    int TRUE = 40;
    /** RegularExpression Id. */
    int PRINT = 41;
    /** RegularExpression Id. */
    int VOID = 42;
    /** RegularExpression Id. */
    int INTEGER_LITERAL = 43;
    /** RegularExpression Id. */
    int IDENTIFIER = 44;
    /** RegularExpression Id. */
    int LETTER = 45;
    /** RegularExpression Id. */
    int DIGIT = 46;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "\" \"",
        "\"\\t\"",
        "\"\\n\"",
        "\"\\r\"",
        "\"\\f\"",
        "<SINGLE_LINE_COMMENT>",
        "<FORMAL_COMMENT>",
        "<MULTI_LINE_COMMENT>",
        "\"(\"",
        "\")\"",
        "\"[\"",
        "\"]\"",
        "\"{\"",
        "\"}\"",
        "\";\"",
        "\".\"",
        "\"=\"",
        "\"<\"",
        "\"+\"",
        "\"-\"",
        "\"&&\"",
        "\"!\"",
        "\"boolean\"",
        "\"class\"",
        "\"interface\"",
        "\"else\"",
        "\"extends\"",
        "\"false\"",
        "\"if\"",
        "\"while\"",
        "\"int\"",
        "\"length\"",
        "\"main\"",
        "\"new\"",
        "\"public\"",
        "\"return\"",
        "\"static\"",
        "\"String\"",
        "\"this\"",
        "\"true\"",
        "\"System.out.println\"",
        "\"void\"",
        "<INTEGER_LITERAL>",
        "<IDENTIFIER>",
        "<LETTER>",
        "<DIGIT>",
        "\",\"",
        "\"*\"",
    };

}
